<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends EntityRepository
{    
    public function findPaginated($page){  
        
        $this->em = $this->getEntityManager();  
        $qb = $this->createQueryBuilder('b');
        
        $filter = array();
        if(isset($_GET['checkbox'])){
            $tabCheckbox = $_GET['checkbox'];
            foreach ($tabCheckbox as $checkbox) {
                $filter = $checkbox;
            };
        }
                
        $qb->select('b')
                ->addSelect('r')
                ->addSelect('a')
                ->addSelect('s')
                ->addSelect('c')
                ->leftJoin('b.rel', 'r')                
                ->leftJoin('r.authors', 'a')
                ->leftJoin('b.serie', 's')
                ->leftJoin('s.categories', 'c')
//                ->where(                        
//                    )
                ;                
                        
        $query = $qb->getQuery();
        
        $numPerPage = 10;
        $query->setMaxResults($numPerPage);
        $query->setFirstResult( ($page-1) * $numPerPage );
        $paginator = new Paginator($query, $fetchJoinCollection = true);
        $result = $paginator;
        
        $paginationResults = array();
                
        //les actualités
        $paginationResults["data"] = $result;
        //affichage des infos sur les résultats
        $paginationResults['nowShowingMin'] = ($page-1) * $numPerPage + 1;
        $paginationResults['nowShowingMax'] = ($page-1) * $numPerPage + 10;
        //nombre total possible
        $paginationResults["total"] = count($result)+1;
        //liens numériques
        $numPagesDiff = 2;
        $lastPage = ceil($paginationResults["total"] / $numPerPage);
        $paginationResults['numLinkMin'] = ($page - $numPagesDiff < 1) ? 1 : $page - $numPagesDiff;
        $paginationResults['numLinkMax'] = ($page + $numPagesDiff >= $lastPage) ? $lastPage : $page + $numPagesDiff;
        //page précédente ?
        $paginationResults["prevPage"] = ($page <= 1) ? false : $page-1;
        $paginationResults["nextPage"] = ($page >= $lastPage) ? false : $page+1;

        //dump($paginationResults);
        return $paginationResults;
    }
    
    public function decrementQte($book)
    {
        $bookStock = $book->getStock();
        $book->setStock($bookStock-1);
        $this->getEntityManager()->persist($book);
        $this->getEntityManager()->flush($book);
    }
    
    public function incrementQte($book)
    {
        $bookStock = $book->getStock();
        $book->setStock($bookStock+1);
        $this->getEntityManager()->persist($book);
        $this->getEntityManager()->flush($book);
    }
    
}
